import java.util.Objects;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;


public class Player implements Comparable<Player>
{
   private String name;
   private String surname;
   private String club;
   private int transferPrice;
   private double salary;

    public Player(String name, String surname,  String club, double salary)
    {
        this.name = name;
        this.surname = surname;
        this.club = club;
        this.salary = salary;
    }

    public Player(String name, String position, int transferPrice, double salary)
    {
        this.name = name;
        this.surname = surname;
        this.transferPrice= transferPrice;
        this.salary = salary;
    }
    
     public Player(String name, String surname, String club, double salary)
    {
        this.name = name;
        this.surname = surname;
        this.club = club;
        this.salary = salary;
    }
   
   

    public String getName()
    {
        return name;
    }

    public String getPosition()
    {
        return surname;
    }
    
    public String getPosition(String surname)
    {
        return surname;
    }
    
   
   
public Date getClub() {
      return club;
   }

    public int getTransferPrice()
    {
        return transferPrice;
    }

    public void setTransferPrice(int transferPrice)
    {
        this.transferPrice = transferPrice;
    }

    public double getSalary()
    {
        return salary;
    }

    public void setName(String name)
    {
        this.name = name;
    }

    public void setPosition(String surname)
    {
        this.surname = surname;
    }

    public void setSalary(double salary)
    {
        this.salary = salary;
    }

    
    public void increaseSalary(double percent)
    {
        this.salary = this.salary + percent/100 * this.salary;
    }
    
    public void decreaseSalary(double percent)
     {
         this.salary=this.salary - percent/100 * this.salary;
     }

    public String toString()
    {
        return "Player{" + "name: " + name + ", surname: " + surname + ", club: " + club + ", salary: " + salary + '}';
    }


    @Override
    public int hashCode()
    {
        int hash = 7;
        hash = 29 * hash + Objects.hashCode(this.name);
        hash = 29 * hash + Objects.hashCode(this.surname);
        hash = 29 * hash + this.int;
        hash = 29 * hash + (int) (Double.doubleToLongBits(this.salary) ^ (Double.doubleToLongBits(this.salary) >>> 32));
        return hash;
    }

    @Override
    public boolean equals(Object obj)
    {
        if (this == obj)
        {
            return true;
        }
        if (obj == null)
        {
            return false;
        }
        if (getClass() != obj.getClass())
        {
            return false;
        }
        final Player other = (Player) obj;
        if (this.transferPrice != other.transferPrice)
        {
            return false;
        }
        if (Double.doubleToLongBits(this.salary) != Double.doubleToLongBits(other.salary))
        {
            return false;
        }
        if (!Objects.equals(this.name, other.name))
        {
            return false;
        }
        if (!Objects.equals(this.surname, other.surname))
        {
            return false;
        }
        return true;
    }
    
    
   @Override
    public int compareTo(Player other)
    {
        if (name.compareTo(other.getName()) < 0)
            return -1;
        else if (name.compareTo(other.getName()) > 0)
            return 1;
        else
            return 0; 
    }

      public int compareToSalary(Player other)
    {
        if (salary < other.salary)
        {
            return -1;
        }
        else if (salary > other.salary)
        {
            return 1;
        }
        else
        {
            return 0;
        }
    }

    public boolean isSalaryEqual(Player player)
    {
        boolean check;
        
        if (player.getSalary() == this.salary)
        {
            check = true;
        }
        else
        {
            check = false;
        }
        return check;
    }
}
